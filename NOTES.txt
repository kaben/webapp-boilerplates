
- Notes on the Flask boilerplate:
  - Here's a condensed version of the process I used to create the Flask
    boilerplate:
    - Create a simple hello-world webapp using Flask.
    - Add view template hello.html to render HTML.
    - Add database with model and tests for table users.
    - Add scripts and tests to populate and view the database.
    - Add error messages and flashed messages to the main layout template.
    - Add, process, and test a login form.
    - Add and test a logout page.
    - Add and test user registration.
    - Add and test form validation and error reporting.
    - Add and test authentication.
    - Add and test logging.
    - Incorporate Twitter Bootstrap for styling.
    - Cleanup code, moving models, views, and forms to their own files.
    - Cleanup directory structure.
    - Moved hello-world, authentication, and registration into three separate
      Flask Blueprints.
    
  - This could be condensed to:
    - hello-world
    - Add testing
    - Add logging
    - Templatize
    - Add database
    - Add authentication
    - Add error- and flash-messages, and form validation and error reporting
    - Add styling
    - Cleanup code and directory structure
    - Separate concerns into Flask Blueprints
    
  - My proposed development cycle:
    - Clone the boilerplate repository
    - Copy needed boilerplate to make skeleton webapp directory
    - Install VirtualEnv and requirements
    - Git-init, -add, -commit webapp directory
    - Deploy to Heroku
    - Enter development cycle:
      - Edit, run, and test app locally
      - Push to Github and Heroku
      - Test live application
      - Repeat

  - To add a new model:
    - Edit "flask-boilerplate/webapp/models.py", adding a new class to the
      "__init__()" function of class ORM, and assigning the class to an
      instance variable of the same name.

  - To add a new blueprint:
    - Make a subdirectory for the blueprint (e.g., "my_blueprint").
    - Create a file "__init__.py" in the subdirectory (e.g.,
      "my_blueprint/__init__.py"); the file can be empty.
    - Create a views module "views.py" (e.g., "my_blueprint/views.py"). Create
      a new view controller for each web page in the blueprint. Use the
      existing file "register/views.py" as an example.
      - Create the blueprint in the views module, using the register vies
        module as an example. Give the blueprint a unique name (e.g.,
        "my_blueprint").
      - To get the URL leading to a particular controller name "my_controller"
        via the "url_for()" function, pass it the name of the blueprint,
        followed by a dot, followed by the name of the controller (e.g.,
        url_for("my_blueprint.my_controller")).
      - View controllers that need database access should use code like the
        following:
        - orm = current_app.config["orm"]
        - db = orm.db
      - The "db" object is a Flask-SQLAlchemy database reference. See the
        Flask-SQLAlchemy docs for more info.
    - Create a forms module "forms.py" (e.g., "my_blueprint/forms.py"). Create
      a new subclass of Form for each HTML form needed. Use the existing file
      "register/forms.py" as an example.
    - Create a subdirectory "templates" for the blueprint's HTML template files
      (e.g., "my_blueprint/templates").
    - Create HTML template files for each controller that needs to render HTML
      (e.g., "my_blueprint/templates/my_blueprint.html"). Use the existing file
      "register/templates/register.html" as an example.
